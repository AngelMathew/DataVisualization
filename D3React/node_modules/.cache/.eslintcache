[{"/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/index.js":"1","/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/App.js":"2","/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/reportWebVitals.js":"3","/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/components/LineChart/LineChart.js":"4","/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/components/ScatterPlot/ScatterPlot.js":"5"},{"size":500,"mtime":1645046204559,"results":"6","hashOfConfig":"7"},{"size":396,"mtime":1645222948408,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1645046204560,"results":"9","hashOfConfig":"7"},{"size":9784,"mtime":1645551225064,"results":"10","hashOfConfig":"7"},{"size":7378,"mtime":1645224856818,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o4buko",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},"/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/index.js",[],[],"/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/App.js",[],[],["30","31"],"/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/reportWebVitals.js",[],[],"/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/components/LineChart/LineChart.js",["32","33"],[],"import React, {useRef, useEffect} from 'react';\nimport * as d3 from \"d3\";\nimport './LineChart.css'\n\nconst LineChart=()=>{\n    const d3Chart=useRef();\n    const parseDate = d3.timeParse('%Y-%m-%d')\n    useEffect(()=>{\n        fetch('https://data.cityofnewyork.us/resource/tg4x-b46p.json')\n        .then(response=>response.json())\n        .then(data=>\n            {\n            // TRANSFORM DATA\n            const permit=data.filter(type=>\n                {\n                    return type.eventtype===\"Shooting Permit\" \n                }\n            )\n            // GET ALL DATA IN AN ARRAY\n            const dates= [...new Set(permit.map((item)=>item.enteredon.slice(0,10)))]\n            let countArray=[]\n            \n\n            // GET COUNTS ON EACH DATE\n            dates.map((item)=>\n            {\n                let date=item;\n                let count=0\n                permit.map((val)=>{\n                    if(val.enteredon.slice(0,10)===date){\n                        count=count+1;\n                    }\n\n                })\n                countArray.push({date:parseDate(date),count:count})\n           \n            })\n            const margin={top:20,right:30,bottom:30,left:30}\n            const width=parseInt(d3.select('#d3demo').style('width'))- margin.left - margin.right\n            const height=parseInt(d3.select('#d3demo').style('height'))-margin.top - margin.bottom\n\n            // SET UP CHART\n            const svg=d3.select(d3Chart.current)\n                        // .attr('width',width + margin.left + margin.right)\n                        // .attr('height',height + height + margin.top + margin.bottom)\n                        .attr(\"viewBox\", `0 0 ${width+margin.left +margin.right} ${height +margin.top + margin.bottom}`)\n                        .style('background-color','transparent')\n                        .append('g')\n                        .attr('transform', 'translate('+ margin.left + ',' + margin.top + ')');\n            // X AXIS SCALE\n            const x=d3.scaleTime()\n                    .domain(d3.extent(countArray,function(d){return d.date}))\n                    .range([0,width])\n            svg.append('g')\n            .attr('transform','translate(0,'+height+')')\n            .call(d3.axisBottom(x))\n\n            // GET MAX VALUE OF COUNT\n            const max=d3.max(countArray,function(d){return d.count})\n   \n            // Y AXIS SCALE\n            const y=d3.scaleLinear()\n                    .domain([0,max])\n                    .range([height,0])\n            svg.append('g')\n            .call(d3.axisLeft(y).ticks(5))\n\n            // DRAW LINE\n            svg.append('path')\n            .data([countArray])\n            .attr('fill','none')\n            .attr('stroke','#FFC0D3')\n            .attr('stroke-width',4)\n            .attr('d',d3.line()\n                        .x((d)=>{return x(d.date)})\n                        .y((d)=>{return y(d.count)})\n                        .curve(d3.curveMonotoneX)\n            )\n\n            // ADD TITLE\n            // svg.append('text')\n\t\t\t// \t\t.attr('x',(width/2))\n\t\t\t// \t\t.attr('y', (margin.top/5 - 10))\n\t\t\t// \t\t.attr('text-anchor', 'middle')\n\t\t\t// \t\t.attr('font-size', '16px')\n\t\t\t// \t\t.attr('fill','#524A4E')\n\t\t\t// \t\t.text('Line Chart - Shooting Permit')\n\n            //         let bisect = d3.bisector((d)=> {return d.date }).right;\n            //         let mouseover=()=> {\n            //             focus.style(\"opacity\", 1)\n            //             focusText.style(\"opacity\",1)\n            //             focusText2.style(\"opacity\",1)\n            //             focusLine.style(\"opacity\", 1)\n            //           }\n        \n            //         let mousemove=(event)=> {\n            //             // recover coordinate we need\n            //             let x0 = d3.pointer(event);\n            //             const hoveredDate = x.invert(x0[0])\n            //             const passed =new Date(hoveredDate.setHours(0,0,0,0));\n            //             let mockdata=countArray.sort(function(a, b) { return a.date - b.date; });\n            //             let i = bisect(mockdata, passed);\n            //             let selectedData = countArray[i]\n            //             focus\n            //               .attr(\"cx\", x(selectedData.date))\n            //               .attr(\"cy\", y(selectedData.count))\n            //             focusText\n            //               .html(\"Date:\" + new Date(selectedData.date).toLocaleDateString())\n            //               .attr(\"x\", x(selectedData.date)+10)\n            //               .attr(\"y\", y(selectedData.count))\n            //             focusText2\n            //                 .html(\"Count:\" + selectedData.count)\n            //                 .attr(\"x\", x(selectedData.date)+10)\n            //                 .attr(\"y\", y(selectedData.count)+15)\n            //             focusLine\n            //                 .attr(\"x1\", x(selectedData.date)).attr(\"x2\", x(selectedData.date))\t\n            //             }\n\n            //         let mouseout=()=> {\n            //             focus.style(\"opacity\", 0)\n            //             focusText.style(\"opacity\", 0)\n            //             focusText2.style(\"opacity\", 0)\n            //             focusLine.style(\"opacity\", 0)\n            //         }\n\n            //   // Create the text that travels along the curve of chart\n            //     let focusGroup = svg\n            //     .append('g')\n            //     let focusText =focusGroup\n            //     .append('text')\n            //     .attr(\"stroke\", \"#FF5C8D\")\n            //     .style(\"opacity\", 0)\n            //     .attr(\"text-anchor\", \"left\")\n            //     .attr(\"alignment-baseline\", \"middle\")\n            //     .attr('dy', \"0.35em\")\n            //     .attr('font-size', \"14px\");\n\n\n            //     let focusText2 =focusGroup\n            //     .append('text')\n            //     .attr(\"stroke\", \"#FF5C8D\")\n            //     .style(\"opacity\", 0)\n            //     .attr(\"text-anchor\", \"left\")\n            //     .attr(\"alignment-baseline\", \"middle\")\n            //     .attr('dy', \"0.55em\")\n            //     .attr('font-size', \"14px\");\n\n            // // Createa line that travels along the curve of chart\n            \n            //     let focusLine = focusGroup\n            //     .append(\"line\")\n            //         .attr(\"stroke\", \"#FF5C8D\")\n            //         .attr(\"x1\", 10).attr(\"x2\", 10)\n            //         .attr(\"y1\", 0).attr(\"y2\", height)\n            //         .style(\"opacity\", 0)\n\n            // // Create a rect on top of the svg area: this rectangle recovers mouse position\n            // svg\n            // .append('rect')\n            // .style(\"fill\", \"none\")\n            // .style(\"pointer-events\", \"all\")\n            // .attr('width', width)\n            // .attr('height', height)\n            // .on('mouseover',mouseover)\n            // .on('mousemove', e=>mousemove(e))\n            // .on('mouseout', mouseout);\n\n            //  // Create the circle that travels along the curve of chart\n            // let focus = svg\n            // .append('g')\n            // .append('circle')\n            //     .style(\"fill\", \"none\")\n            //     .attr(\"stroke\", \"#FF5C8D\")\n            //     .attr('r', 6)\n            //     .style(\"opacity\", 0)\n            \n            const focus = svg\n                .append('g')\n                // .attr('class', 'focus')\n                .style('display', 'none');\n\n                focus.append('circle').attr('r', 5).style(\"fill\", \"#FF5C8D\");\n                let bisect = d3.bisector((d)=> {return d.date }).left;\n            \n                const tooltip = d3\n                .select('#d3demo')\n                .append('div')\n                .attr('class', 'tooltip')\n                .style('opacity', 0);\n\n                svg\n                .append('rect')\n                .attr('class', 'overlay')\n                .attr('width', width)\n                .attr('height', height)\n                .style('opacity', 0)\n                .on('mouseover', () => {\n                    focus.style('display', null);\n                })\n                .on('mouseout', () => {\n                    tooltip\n                    //     .transition()\n                    //     .duration(300)\n                        .style('opacity', 0);\n                        focus.style(\"display\", 'none')\n                })\n               .on('mousemove', e=>mousemove(e));\n                function mousemove(event) {\n                // const bisect = d3.bisector(d => d.label).right;\n                const xPos = d3.pointer(event);\n                const hoveredDate = x.invert(xPos[0])\n                const passed =new Date(hoveredDate.setHours(0,0,0,0));\n                let mockdata=countArray.sort(function(a, b) { return a.date - b.date; });\n                let x0= bisect(mockdata, passed);\n                console.log(\"x0\",x0)\n                const d0 = countArray[x0];\n                // focus\n                //     .attr(\"cx\", x(d0.date))\n                //     .attr(\"cy\", y(d0.count))\n                focus.attr(\n                    'transform',\n                    `translate(${x(d0.date)},${y(d0.count)})`,\n                );\n                tooltip\n                //     .transition()\n                //     .duration(200)\n                   .style('opacity', 1);\n                tooltip\n                    .html(\"Date:\" + new Date(d0.date).toLocaleDateString())\n                    .style(\n                        'transform',\n                        `translate(${x(d0.date)}px,${y(d0.count)}px)`,\n                );\n            }\n\n            }\n        )\n    })\n    return(\n        <div id=\"d3demo\">\n            <svg ref={d3Chart}>\n\n            </svg>\n        </div>\n    )\n\n}\n\nexport default LineChart;","/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/components/ScatterPlot/ScatterPlot.js",["34","35"],[],"import React, {useRef, useEffect} from 'react';\nimport * as d3 from \"d3\";\nimport './ScatterPlot.css'\n\nconst ScatterPlot=()=>{\n    const d3Chart=useRef();\n    const parseDate = d3.timeParse('%Y-%m-%d')\n    useEffect(()=>{\n        fetch('https://data.cityofnewyork.us/resource/tg4x-b46p.json')\n        .then(response=>response.json())\n        .then(data=>\n            {\n            // TRANSFORM DATA\n            const permit=data.filter(type=>\n                {\n                    return type.eventtype===\"Shooting Permit\" \n                }\n            )\n            // GET ALL DATA IN AN ARRAY\n            const dates= [...new Set(permit.map((item)=>item.enteredon.slice(0,10)))]\n            let countArray=[]\n            \n\n            // GET COUNTS ON EACH DATE\n            dates.map((item)=>\n            {\n                let date=item\n                let count=0\n                permit.map((val)=>{\n                    if(val.enteredon.slice(0,10)===date){\n                        count=count+1;\n                    }\n\n                })\n                countArray.push({date:parseDate(date),count:count})\n           \n            })\n            const margin={top:20,right:30,bottom:30,left:30}\n            const width=parseInt(d3.select('#d3demo').style('width'))- margin.left - margin.right\n            const height=parseInt(d3.select('#d3demo').style('height'))-margin.top - margin.bottom\n\n            // SET UP CHART\n            const svg=d3.select(d3Chart.current)\n                        // .attr('width',width + margin.left + margin.right)\n                        // .attr('height',height + height + margin.top + margin.bottom)\n                        .attr(\"viewBox\", `0 0 ${width+margin.left +margin.right} ${height +margin.top + margin.bottom}`)\n                        .style('background-color','transparent')\n                        .append('g')\n                        .attr('transform', 'translate('+ margin.left + ',' + margin.top + ')');\n            // X AXIS SCALE\n            const x=d3.scaleTime()\n                    .domain(d3.extent(countArray,function(d){return d.date}))\n                    .range([0,width])\n            svg.append('g')\n            .attr('transform','translate(0,'+height+')')\n            .call(d3.axisBottom(x))\n\n            // GET MAX VALUE OF COUNT\n            const max=d3.max(countArray,function(d){return d.count})\n   \n            // Y AXIS SCALE\n            const y=d3.scaleLinear()\n                    .domain([0,max])\n                    .range([height,0])\n            svg.append('g')\n            .call(d3.axisLeft(y).ticks(5))\n\n            // DRAW CIRCLES\n            svg.selectAll(\".bubble\")\n            .data(countArray)    // bind each element of the countArray array to one SVG circle\n            .join(\"circle\")\n            .attr(\"class\", \"bubble\")\n            .attr(\"cx\", d => x(d.date))   // set the x position based on the dates\n            .attr(\"cy\", d => y(d.count))   // set the y position based on the counts\n            .attr(\"r\", d=>(d.count)*.2)  // set the radius based on the count\n            .attr(\"stroke\", \"#FF5C8D\")\n            .attr(\"fill\", \"#FFC0D3\") \n\n            // ADD TITLE\n            svg.append('text')\n\t\t\t\t\t.attr('x',(width/2))\n\t\t\t\t\t.attr('y', (margin.top/5 - 10))\n\t\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t\t.attr('font-size', '16px')\n\t\t\t\t\t.attr('fill','#524A4E')\n\t\t\t\t\t.text('Scatter Plot- Shooting Permit')\n\n                    let bisect = d3.bisector((d)=> {return d.date }).right;\n                    let mouseover=()=> {\n                        focus.style(\"opacity\", 1)\n                        focusText.style(\"opacity\",1)\n                        focusText2.style(\"opacity\",1)\n                        focusLine.style(\"opacity\", 1)\n                      }\n        \n                    let mousemove=(event)=> {\n                        // recover coordinate we need\n                        let x0 = d3.pointer(event);\n                        const hoveredDate = x.invert(x0[0])\n                        const passed =new Date(hoveredDate.setHours(0,0,0,0));\n                        let mockdata=countArray.sort(function(a, b) { return a.date - b.date; });\n                        let i = bisect(mockdata, passed);\n                        let selectedData = countArray[i]\n                        focus\n                          .attr(\"cx\", x(selectedData.date))\n                          .attr(\"cy\", y(selectedData.count))\n                        focusText\n                          .html(\"Date:\" + new Date(selectedData.date).toLocaleDateString())\n                          .attr(\"x\", x(selectedData.date)+10)\n                          .attr(\"y\", y(selectedData.count))\n                        focusText2\n                            .html(\"Count:\" + selectedData.count)\n                            .attr(\"x\", x(selectedData.date)+10)\n                            .attr(\"y\", y(selectedData.count)+15)\n                        focusLine\n                            .attr(\"x1\", x(selectedData.date)).attr(\"x2\", x(selectedData.date))\t\n                        }\n\n                    let mouseout=()=> {\n                        focus.style(\"opacity\", 0)\n                        focusText.style(\"opacity\", 0)\n                        focusText2.style(\"opacity\", 0)\n                        focusLine.style(\"opacity\", 0)\n                    }\n\n              // Create the text that travels along the curve of chart\n                let focusGroup = svg\n                .append('g')\n                let focusText =focusGroup\n                .append('text')\n                .attr(\"stroke\", \"#FF5C8D\")\n                .style(\"opacity\", 0)\n                .attr(\"text-anchor\", \"left\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr('dy', \"0.35em\")\n                .attr('font-size', \"14px\");\n\n\n                let focusText2 =focusGroup\n                .append('text')\n                .attr(\"stroke\", \"#FF5C8D\")\n                .style(\"opacity\", 0)\n                .attr(\"text-anchor\", \"left\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr('dy', \"0.55em\")\n                .attr('font-size', \"14px\");\n\n            // Createa line that travels along the curve of chart\n            \n                let focusLine = focusGroup\n                .append(\"line\")\n                    .attr(\"stroke\", \"#FF5C8D\")\n                    .attr(\"x1\", 10).attr(\"x2\", 10)\n                    .attr(\"y1\", 0).attr(\"y2\", height)\n                    .style(\"opacity\", 0)\n\n            // Create a rect on top of the svg area: this rectangle recovers mouse position\n            svg\n            .append('rect')\n            .style(\"fill\", \"none\")\n            .style(\"pointer-events\", \"all\")\n            .attr('width', width)\n            .attr('height', height)\n            .on('mouseover',mouseover)\n            .on('mousemove', e=>mousemove(e))\n            .on('mouseout', mouseout);\n\n             // Create the circle that travels along the curve of chart\n            let focus = svg\n            .append('g')\n            .append('circle')\n                .style(\"fill\", \"none\")\n                .attr(\"stroke\", \"#FF5C8D\")\n                .attr('r', 6)\n                .style(\"opacity\", 0)\n            \n            }\n        )\n    })\n    return(\n        <div id=\"d3demo\">\n            <svg ref={d3Chart}>\n\n            </svg>\n        </div>\n    )\n\n}\n\nexport default ScatterPlot;",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":25,"column":29,"nodeType":"42","messageId":"43","endLine":25,"endColumn":31},{"ruleId":"40","severity":1,"message":"41","line":29,"column":33,"nodeType":"42","messageId":"43","endLine":29,"endColumn":35},{"ruleId":"40","severity":1,"message":"41","line":25,"column":29,"nodeType":"42","messageId":"43","endLine":25,"endColumn":31},{"ruleId":"40","severity":1,"message":"41","line":29,"column":33,"nodeType":"42","messageId":"43","endLine":29,"endColumn":35},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]
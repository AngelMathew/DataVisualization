{"ast":null,"code":"var _jsxFileName = \"/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/components/LineChart/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport './LineChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LineChart = () => {\n  _s();\n\n  const d3Chart = useRef();\n  const parseDate = d3.timeParse('%Y-%m-%d');\n  useEffect(() => {\n    fetch('https://data.cityofnewyork.us/resource/tg4x-b46p.json').then(response => response.json()).then(data => {\n      // TRANSFORM DATA\n      const permit = data.filter(type => {\n        return type.eventtype === \"Shooting Permit\";\n      }); // GET ALL DATA IN AN ARRAY\n\n      const dates = [...new Set(permit.map(item => item.enteredon.slice(0, 10)))];\n      let countArray = []; // GET COUNTS ON EACH DATE\n\n      dates.map(item => {\n        let date = item;\n        let count = 0;\n        permit.map(val => {\n          if (val.enteredon.slice(0, 10) === date) {\n            count = count + 1;\n          }\n        });\n        countArray.push({\n          date: parseDate(date),\n          count: count\n        });\n      });\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 30,\n        left: 30\n      };\n      const width = parseInt(d3.select('#d3demo').style('width')) - margin.left - margin.right;\n      const height = parseInt(d3.select('#d3demo').style('height')) - margin.top - margin.bottom; // SET UP CHART\n\n      const svg = d3.select(d3Chart.current) // .attr('width',width + margin.left + margin.right)\n      // .attr('height',height + height + margin.top + margin.bottom)\n      .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`).style('background-color', 'transparent').append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); // X AXIS SCALE\n\n      const x = d3.scaleTime().domain(d3.extent(countArray, function (d) {\n        return d.date;\n      })).range([0, width]);\n      svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)); // GET MAX VALUE OF COUNT\n\n      const max = d3.max(countArray, function (d) {\n        return d.count;\n      }); // Y AXIS SCALE\n\n      const y = d3.scaleLinear().domain([0, max]).range([height, 0]);\n      svg.append('g').call(d3.axisLeft(y).ticks(5)); // DRAW LINE\n\n      svg.append('path').data([countArray]).attr('fill', 'none').attr('stroke', '#524A4E').attr('stroke-width', 2).attr('d', d3.line().x(d => {\n        return x(d.date);\n      }).y(d => {\n        return y(d.count);\n      })); // ADD TITLE\n      // svg.append('text')\n      // \t\t.attr('x',(width/2))\n      // \t\t.attr('y', (margin.top/5 - 10))\n      // \t\t.attr('text-anchor', 'middle')\n      // \t\t.attr('font-size', '16px')\n      // \t\t.attr('fill','#524A4E')\n      // \t\t.text('Line Chart - Shooting Permit')\n      //         let bisect = d3.bisector((d)=> {return d.date }).right;\n      //         let mouseover=()=> {\n      //             focus.style(\"opacity\", 1)\n      //             focusText.style(\"opacity\",1)\n      //             focusText2.style(\"opacity\",1)\n      //             focusLine.style(\"opacity\", 1)\n      //           }\n      //         let mousemove=(event)=> {\n      //             // recover coordinate we need\n      //             let x0 = d3.pointer(event);\n      //             const hoveredDate = x.invert(x0[0])\n      //             const passed =new Date(hoveredDate.setHours(0,0,0,0));\n      //             let mockdata=countArray.sort(function(a, b) { return a.date - b.date; });\n      //             let i = bisect(mockdata, passed);\n      //             let selectedData = countArray[i]\n      //             focus\n      //               .attr(\"cx\", x(selectedData.date))\n      //               .attr(\"cy\", y(selectedData.count))\n      //             focusText\n      //               .html(\"Date:\" + new Date(selectedData.date).toLocaleDateString())\n      //               .attr(\"x\", x(selectedData.date)+10)\n      //               .attr(\"y\", y(selectedData.count))\n      //             focusText2\n      //                 .html(\"Count:\" + selectedData.count)\n      //                 .attr(\"x\", x(selectedData.date)+10)\n      //                 .attr(\"y\", y(selectedData.count)+15)\n      //             focusLine\n      //                 .attr(\"x1\", x(selectedData.date)).attr(\"x2\", x(selectedData.date))\t\n      //             }\n      //         let mouseout=()=> {\n      //             focus.style(\"opacity\", 0)\n      //             focusText.style(\"opacity\", 0)\n      //             focusText2.style(\"opacity\", 0)\n      //             focusLine.style(\"opacity\", 0)\n      //         }\n      //   // Create the text that travels along the curve of chart\n      //     let focusGroup = svg\n      //     .append('g')\n      //     let focusText =focusGroup\n      //     .append('text')\n      //     .attr(\"stroke\", \"#FF5C8D\")\n      //     .style(\"opacity\", 0)\n      //     .attr(\"text-anchor\", \"left\")\n      //     .attr(\"alignment-baseline\", \"middle\")\n      //     .attr('dy', \"0.35em\")\n      //     .attr('font-size', \"14px\");\n      //     let focusText2 =focusGroup\n      //     .append('text')\n      //     .attr(\"stroke\", \"#FF5C8D\")\n      //     .style(\"opacity\", 0)\n      //     .attr(\"text-anchor\", \"left\")\n      //     .attr(\"alignment-baseline\", \"middle\")\n      //     .attr('dy', \"0.55em\")\n      //     .attr('font-size', \"14px\");\n      // // Createa line that travels along the curve of chart\n      //     let focusLine = focusGroup\n      //     .append(\"line\")\n      //         .attr(\"stroke\", \"#FF5C8D\")\n      //         .attr(\"x1\", 10).attr(\"x2\", 10)\n      //         .attr(\"y1\", 0).attr(\"y2\", height)\n      //         .style(\"opacity\", 0)\n      // // Create a rect on top of the svg area: this rectangle recovers mouse position\n      // svg\n      // .append('rect')\n      // .style(\"fill\", \"none\")\n      // .style(\"pointer-events\", \"all\")\n      // .attr('width', width)\n      // .attr('height', height)\n      // .on('mouseover',mouseover)\n      // .on('mousemove', e=>mousemove(e))\n      // .on('mouseout', mouseout);\n      //  // Create the circle that travels along the curve of chart\n      // let focus = svg\n      // .append('g')\n      // .append('circle')\n      //     .style(\"fill\", \"none\")\n      //     .attr(\"stroke\", \"#FF5C8D\")\n      //     .attr('r', 6)\n      //     .style(\"opacity\", 0)\n\n      const focus = svg.append('g') // .attr('class', 'focus')\n      .style('display', 'none');\n      focus.append('circle').attr('r', 5).attr(\"stroke\", \"#FF5C8D\").style(\"fill\", \"red\");\n      let bisect = d3.bisector(d => {\n        return d.date;\n      }).left;\n      const tooltip = d3.select('#d3demo').append('div').attr('class', 'tooltip').style('opacity', 0);\n      svg.append('rect').attr('class', 'overlay').attr('width', width).attr('height', height).style('opacity', 0).on('mouseover', () => {\n        focus.style('display', null);\n      }).on('mouseout', () => {\n        tooltip //     .transition()\n        //     .duration(300)\n        .style('opacity', 0);\n        focus.style(\"display\", 'none');\n      }).on('mousemove', e => mousemove(e));\n\n      function mousemove(event) {\n        // const bisect = d3.bisector(d => d.label).right;\n        const xPos = d3.pointer(event);\n        const hoveredDate = x.invert(xPos[0]);\n        const passed = new Date(hoveredDate.setHours(0, 0, 0, 0));\n        let mockdata = countArray.sort(function (a, b) {\n          return a.date - b.date;\n        });\n        let x0 = bisect(mockdata, passed);\n        console.log(\"x0\", x0);\n        const d0 = countArray[x0]; // focus\n        //     .attr(\"cx\", x(d0.date))\n        //     .attr(\"cy\", y(d0.count))\n\n        focus.attr('transform', `translate(${x(d0.date)},${y(d0.count)})`);\n        tooltip.transition().duration(200).style('opacity', 1);\n        tooltip.html(\"Date:\" + new Date(d0.date).toLocaleDateString()).style('transform', `translate(${x(d0.date)}px,${y(d0.count)}px)`);\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"d3demo\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: d3Chart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LineChart, \"UZaK9swYa4puou/ZTg3GMr5EMOQ=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Users/angelmathew/Desktop/reactProjects/D3JS/D3React/src/components/LineChart/LineChart.js"],"names":["React","useRef","useEffect","d3","LineChart","d3Chart","parseDate","timeParse","fetch","then","response","json","data","permit","filter","type","eventtype","dates","Set","map","item","enteredon","slice","countArray","date","count","val","push","margin","top","right","bottom","left","width","parseInt","select","style","height","svg","current","attr","append","x","scaleTime","domain","extent","d","range","call","axisBottom","max","y","scaleLinear","axisLeft","ticks","line","focus","bisect","bisector","tooltip","on","e","mousemove","event","xPos","pointer","hoveredDate","invert","passed","Date","setHours","mockdata","sort","a","b","x0","console","log","d0","transition","duration","html","toLocaleDateString"],"mappings":"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A;;AACA,YAAM0B,CAAC,GAAChD,EAAE,CAACiD,WAAH,GACCR,MADD,CACQ,CAAC,CAAD,EAAGM,GAAH,CADR,EAECH,KAFD,CAEO,CAACV,MAAD,EAAQ,CAAR,CAFP,CAAR;AAGAC,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACCO,IADD,CACM7C,EAAE,CAACkD,QAAH,CAAYF,CAAZ,EAAeG,KAAf,CAAqB,CAArB,CADN,EArDA,CAwDA;;AACAhB,MAAAA,GAAG,CAACG,MAAJ,CAAW,MAAX,EACC7B,IADD,CACM,CAACW,UAAD,CADN,EAECiB,IAFD,CAEM,MAFN,EAEa,MAFb,EAGCA,IAHD,CAGM,QAHN,EAGe,SAHf,EAICA,IAJD,CAIM,cAJN,EAIqB,CAJrB,EAKCA,IALD,CAKM,GALN,EAKUrC,EAAE,CAACoD,IAAH,GACGb,CADH,CACMI,CAAD,IAAK;AAAC,eAAOJ,CAAC,CAACI,CAAC,CAACtB,IAAH,CAAR;AAAiB,OAD5B,EAEG2B,CAFH,CAEML,CAAD,IAAK;AAAC,eAAOK,CAAC,CAACL,CAAC,CAACrB,KAAH,CAAR;AAAkB,OAF7B,CALV,EAzDA,CAmEA;AACA;AACT;AACA;AACA;AACA;AACA;AACA;AAES;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAM+B,KAAK,GAAGlB,GAAG,CACZG,MADS,CACF,GADE,EAEV;AAFU,OAGTL,KAHS,CAGH,SAHG,EAGQ,MAHR,CAAd;AAKIoB,MAAAA,KAAK,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","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport * as d3 from \"d3\";\nimport './LineChart.css'\n\nconst LineChart=()=>{\n    const d3Chart=useRef();\n    const parseDate = d3.timeParse('%Y-%m-%d')\n    useEffect(()=>{\n        fetch('https://data.cityofnewyork.us/resource/tg4x-b46p.json')\n        .then(response=>response.json())\n        .then(data=>\n            {\n            // TRANSFORM DATA\n            const permit=data.filter(type=>\n                {\n                    return type.eventtype===\"Shooting Permit\" \n                }\n            )\n            // GET ALL DATA IN AN ARRAY\n            const dates= [...new Set(permit.map((item)=>item.enteredon.slice(0,10)))]\n            let countArray=[]\n            \n\n            // GET COUNTS ON EACH DATE\n            dates.map((item)=>\n            {\n                let date=item;\n                let count=0\n                permit.map((val)=>{\n                    if(val.enteredon.slice(0,10)===date){\n                        count=count+1;\n                    }\n\n                })\n                countArray.push({date:parseDate(date),count:count})\n           \n            })\n            const margin={top:20,right:30,bottom:30,left:30}\n            const width=parseInt(d3.select('#d3demo').style('width'))- margin.left - margin.right\n            const height=parseInt(d3.select('#d3demo').style('height'))-margin.top - margin.bottom\n\n            // SET UP CHART\n            const svg=d3.select(d3Chart.current)\n                        // .attr('width',width + margin.left + margin.right)\n                        // .attr('height',height + height + margin.top + margin.bottom)\n                        .attr(\"viewBox\", `0 0 ${width+margin.left +margin.right} ${height +margin.top + margin.bottom}`)\n                        .style('background-color','transparent')\n                        .append('g')\n                        .attr('transform', 'translate('+ margin.left + ',' + margin.top + ')');\n            // X AXIS SCALE\n            const x=d3.scaleTime()\n                    .domain(d3.extent(countArray,function(d){return d.date}))\n                    .range([0,width])\n            svg.append('g')\n            .attr('transform','translate(0,'+height+')')\n            .call(d3.axisBottom(x))\n\n            // GET MAX VALUE OF COUNT\n            const max=d3.max(countArray,function(d){return d.count})\n   \n            // Y AXIS SCALE\n            const y=d3.scaleLinear()\n                    .domain([0,max])\n                    .range([height,0])\n            svg.append('g')\n            .call(d3.axisLeft(y).ticks(5))\n\n            // DRAW LINE\n            svg.append('path')\n            .data([countArray])\n            .attr('fill','none')\n            .attr('stroke','#524A4E')\n            .attr('stroke-width',2)\n            .attr('d',d3.line()\n                        .x((d)=>{return x(d.date)})\n                        .y((d)=>{return y(d.count)})\n            )\n\n            // ADD TITLE\n            // svg.append('text')\n\t\t\t// \t\t.attr('x',(width/2))\n\t\t\t// \t\t.attr('y', (margin.top/5 - 10))\n\t\t\t// \t\t.attr('text-anchor', 'middle')\n\t\t\t// \t\t.attr('font-size', '16px')\n\t\t\t// \t\t.attr('fill','#524A4E')\n\t\t\t// \t\t.text('Line Chart - Shooting Permit')\n\n            //         let bisect = d3.bisector((d)=> {return d.date }).right;\n            //         let mouseover=()=> {\n            //             focus.style(\"opacity\", 1)\n            //             focusText.style(\"opacity\",1)\n            //             focusText2.style(\"opacity\",1)\n            //             focusLine.style(\"opacity\", 1)\n            //           }\n        \n            //         let mousemove=(event)=> {\n            //             // recover coordinate we need\n            //             let x0 = d3.pointer(event);\n            //             const hoveredDate = x.invert(x0[0])\n            //             const passed =new Date(hoveredDate.setHours(0,0,0,0));\n            //             let mockdata=countArray.sort(function(a, b) { return a.date - b.date; });\n            //             let i = bisect(mockdata, passed);\n            //             let selectedData = countArray[i]\n            //             focus\n            //               .attr(\"cx\", x(selectedData.date))\n            //               .attr(\"cy\", y(selectedData.count))\n            //             focusText\n            //               .html(\"Date:\" + new Date(selectedData.date).toLocaleDateString())\n            //               .attr(\"x\", x(selectedData.date)+10)\n            //               .attr(\"y\", y(selectedData.count))\n            //             focusText2\n            //                 .html(\"Count:\" + selectedData.count)\n            //                 .attr(\"x\", x(selectedData.date)+10)\n            //                 .attr(\"y\", y(selectedData.count)+15)\n            //             focusLine\n            //                 .attr(\"x1\", x(selectedData.date)).attr(\"x2\", x(selectedData.date))\t\n            //             }\n\n            //         let mouseout=()=> {\n            //             focus.style(\"opacity\", 0)\n            //             focusText.style(\"opacity\", 0)\n            //             focusText2.style(\"opacity\", 0)\n            //             focusLine.style(\"opacity\", 0)\n            //         }\n\n            //   // Create the text that travels along the curve of chart\n            //     let focusGroup = svg\n            //     .append('g')\n            //     let focusText =focusGroup\n            //     .append('text')\n            //     .attr(\"stroke\", \"#FF5C8D\")\n            //     .style(\"opacity\", 0)\n            //     .attr(\"text-anchor\", \"left\")\n            //     .attr(\"alignment-baseline\", \"middle\")\n            //     .attr('dy', \"0.35em\")\n            //     .attr('font-size', \"14px\");\n\n\n            //     let focusText2 =focusGroup\n            //     .append('text')\n            //     .attr(\"stroke\", \"#FF5C8D\")\n            //     .style(\"opacity\", 0)\n            //     .attr(\"text-anchor\", \"left\")\n            //     .attr(\"alignment-baseline\", \"middle\")\n            //     .attr('dy', \"0.55em\")\n            //     .attr('font-size', \"14px\");\n\n            // // Createa line that travels along the curve of chart\n            \n            //     let focusLine = focusGroup\n            //     .append(\"line\")\n            //         .attr(\"stroke\", \"#FF5C8D\")\n            //         .attr(\"x1\", 10).attr(\"x2\", 10)\n            //         .attr(\"y1\", 0).attr(\"y2\", height)\n            //         .style(\"opacity\", 0)\n\n            // // Create a rect on top of the svg area: this rectangle recovers mouse position\n            // svg\n            // .append('rect')\n            // .style(\"fill\", \"none\")\n            // .style(\"pointer-events\", \"all\")\n            // .attr('width', width)\n            // .attr('height', height)\n            // .on('mouseover',mouseover)\n            // .on('mousemove', e=>mousemove(e))\n            // .on('mouseout', mouseout);\n\n            //  // Create the circle that travels along the curve of chart\n            // let focus = svg\n            // .append('g')\n            // .append('circle')\n            //     .style(\"fill\", \"none\")\n            //     .attr(\"stroke\", \"#FF5C8D\")\n            //     .attr('r', 6)\n            //     .style(\"opacity\", 0)\n            \n            const focus = svg\n                .append('g')\n                // .attr('class', 'focus')\n                .style('display', 'none');\n\n                focus.append('circle').attr('r', 5).attr(\"stroke\", \"#FF5C8D\").style(\"fill\", \"red\");\n                let bisect = d3.bisector((d)=> {return d.date }).left;\n            \n                const tooltip = d3\n                .select('#d3demo')\n                .append('div')\n                .attr('class', 'tooltip')\n                .style('opacity', 0);\n\n                svg\n                .append('rect')\n                .attr('class', 'overlay')\n                .attr('width', width)\n                .attr('height', height)\n                .style('opacity', 0)\n                .on('mouseover', () => {\n                    focus.style('display', null);\n                })\n                .on('mouseout', () => {\n                    tooltip\n                    //     .transition()\n                    //     .duration(300)\n                        .style('opacity', 0);\n                        focus.style(\"display\", 'none')\n                })\n               .on('mousemove', e=>mousemove(e));\n                function mousemove(event) {\n                // const bisect = d3.bisector(d => d.label).right;\n                const xPos = d3.pointer(event);\n                const hoveredDate = x.invert(xPos[0])\n                const passed =new Date(hoveredDate.setHours(0,0,0,0));\n                let mockdata=countArray.sort(function(a, b) { return a.date - b.date; });\n                let x0= bisect(mockdata, passed);\n                console.log(\"x0\",x0)\n                const d0 = countArray[x0];\n                // focus\n                //     .attr(\"cx\", x(d0.date))\n                //     .attr(\"cy\", y(d0.count))\n                focus.attr(\n                    'transform',\n                    `translate(${x(d0.date)},${y(d0.count)})`,\n                );\n                tooltip\n                    .transition()\n                    .duration(200)\n                    .style('opacity', 1);\n                tooltip\n                    .html(\"Date:\" + new Date(d0.date).toLocaleDateString())\n                    .style(\n                        'transform',\n                        `translate(${x(d0.date)}px,${y(d0.count)}px)`,\n                );\n            }\n\n            }\n        )\n    })\n    return(\n        <div id=\"d3demo\">\n            <svg ref={d3Chart}>\n\n            </svg>\n        </div>\n    )\n\n}\n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}